Мета роботи:
Розробка серверної/back-end частини програмної системи моніторингу землі для сільськогосподарських потреб.

Хід роботи:

1	ОПИС АРХІТЕКТУРИ СИСТЕМИ

Програмна система моніторингу землі для сільськогосподарських потреб побудована на основі клієнт-серверної архітектури. Система складається з наступних основних компонентів: 
1.1	Серверна частина: 
–	Веб-сервер на базі Express.js 
–	База даних MongoDB 
–	API для взаємодії з клієнтською частиною та сенсорами 
–	Сервіси обробки та аналізу даних 
1.2	Клієнтська частина: 
–	Веб-інтерфейс для користувачів (не представлений в наданому коді)
1.3	Сенсори: 
–	Пристрої для збору даних про стан ґрунту (вологість, температура, вміст поживних речовин)
1.4	Основні функціональні модулі: 
1.4.1	Модуль автентифікації та авторизації: 
–	Реєстрація та вхід користувачів 
–	Управління ролями (користувач, адміністратор)
1.4.2	Модуль управління користувачами: 
–	Отримання списку користувачів 
–	Оновлення інформації про користувачів 
–	Блокування та розблокування користувачів 
–	Видалення користувачів
1.4.3	Модуль управління сенсорами: 
–	Отримання даних від сенсорів 
–	Зберігання даних сенсорів 
–	Експорт та імпорт даних сенсорів
1.4.4	Модуль управління культурами: 
–	Додавання інформації про сільськогосподарські культури 
–	Отримання списку культур
1.4.5	Модуль аналізу та рекомендацій: 
–	Аналіз даних сенсорів 
–	Генерація рекомендацій щодо догляду за культурами 
Архітектура системи забезпечує масштабованість, гнучкість та можливість розширення функціоналу. Використання MongoDB як бази даних дозволяє ефективно зберігати та обробляти великі обсяги даних від сенсорів. REST API забезпечує зручну взаємодію між клієнтською та серверною частинами, а також можливість інтеграції з іншими системами.

2	ПОБУДОВА ДІАГРАМИ РОЗГОРТАННЯ
 
Рисунок 1 – Діаграма розгортання

На рисунку 1(с. 3) зображено діаграму розгортання для системи моніторингу землі. Ця діаграма показує фізичну архітектуру системи та взаємозв'язки між її компонентами, показує як ці компоненти взаємодіють між собою: клієнти спілкуються з сервером через HTTP/HTTPS, сервер звертається до бази даних, а датчики надсилають дані на сервер. Це дозволяє зрозуміти, як система фізично розгорнута та як відбувається обмін даними між її частинами.

3	ОПИС АРХІТЕКТУРИ СЕРВЕРНОЇ ЧАСТИНИ

Серверна частина нашої системи моніторингу землі побудована на основі Node.js з використанням фреймворку Express.js. Архітектура серверної частини слідує принципам RESTful API та модульного дизайну. Наведемо детальний опис компонентів серверної частини:
3.1	Основні компоненти: 
1.	Сервер Express.js (app.js): 
–	Налаштування middleware (cors, bodyParser)
–	Підключення до MongoDB 
–	Налаштування маршрутів API 
2.	Маршрутизація (routes): 
–	authRoutes.js - маршрути для автентифікації 
–	cropRoutes.js - маршрути для роботи з культурами r
–	recommendationRoutes.js - маршрути для отримання рекомендацій 
–	sensorRoutes.js - маршрути для роботи з даними сенсорів 
–	userRoutes.js – маршрути для управління користувачами 
3.	Контролери (controllers): 
–	authController.js - логіка автентифікації 
–	cropController.js - управління даними про культури r
–	recommendationController.js - генерація рекомендацій 
–	sensorController.js - обробка даних сенсорів 
–	userController.js - управління користувачами 
4.	Моделі даних (models): 
–	User.js - модель користувача 
–	Crop.js - модель сільськогосподарської культури 
–	SensorData.js - модель даних сенсорів 
5.	Сервіси (services): 
–	analysisService.js - аналіз даних та генерація рекомендацій 
6.	Middleware: 
–	authMiddleware.js - перевірка автентифікації 
–	adminMiddleware.js - перевірка прав адміністратора
3.2	Взаємодія компонентів: 
1.	Запити клієнта надходять до сервера Express.js. 
2.	Маршрутизатор направляє запити до відповідних контролерів. 
3.	Контролери обробляють запити, взаємодіючи з моделями та сервісами. 
4.	Моделі забезпечують взаємодію з базою даних MongoDB. 
5.	Сервіси виконують складну бізнес-логіку, наприклад, аналіз даних сенсорів. 
6.	Результати обробки повертаються клієнту у форматі JSON.
3.3	Особливості реалізації: 
–	Використання асинхронних функцій (async/await) для ефективної обробки запитів. 
–	Застосування middleware для автентифікації та авторизації. 
–	Модульна структура, що дозволяє легко розширювати функціональність. 
–	Використання MongoDB для зберігання даних, що забезпечує гнучкість схеми та масштабованість.
3.4	Безпека: 
–	Використання bcrypt для хешування паролів користувачів. 
–	Застосування JSON Web Tokens (JWT) для автентифікації. 
–	Middleware для перевірки прав доступу до різних ендпоінтів API. 
Така архітектура забезпечує розділення відповідальності між компонентами, що полегшує розробку, тестування та подальшу підтримку системи. Також, модульний підхід дозволяє легко додавати нові функції та масштабувати систему в міру необхідності.

4	ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

Рисунок 2 – Діаграма прецендентів

Опис прецендентів:
1.	Користувач: 
–	Реєстрація: створення нового облікового запису в системі. 
–	Вхід в систему: автентифікація користувача для доступу до функцій системи. 
–	Перегляд даних сенсорів: доступ до інформації про вологість, температуру та вміст поживних речовин у ґрунті. 
–	Отримання рекомендацій: отримання порад щодо догляду за культурами на основі даних сенсорів. 
–	Вибір сенсорів для моніторингу: налаштування списку сенсорів, дані яких користувач хоче відстежувати. 
–	Перегляд інформації про культури: доступ до довідкової інформації про різні сільськогосподарські культури. 
2.	Адміністратор (додатково до функцій користувача): 
–	Управління користувачами: перегляд списку користувачів та їх даних. 
–	Блокування/розблокування користувачів: контроль доступу користувачів до системи. 
–	Видалення користувачів: видалення облікових записів з системи. 
–	Додавання нових культур: внесення інформації про нові сільськогосподарські культури. 
–	Імпорт/експорт даних сенсорів: можливість масового завантаження або вивантаження даних сенсорів. 

5	ПОБУДОВА ER-ДІАГРАМИ

У додатку А на рисунку 3 зображено ER-діаграму для системи моніторингу землі. Ця діаграма показує, що користувач може мати кілька датчиків, кожен датчик пов'язаний з певною культурою, і кожен датчик генерує багато записів даних. Ця структура дозволяє ефективно зберігати та аналізувати дані для надання рекомендацій щодо догляду за сільськогосподарськими культурами.

6	СПЕЦИФІКАЦІЯ REST

Наша система використовує REST API для взаємодії між клієнтською та серверною частинами. REST специфікацію наведено в таблиці 1.
Таблиця 1 – REST специфікація
Метод	Шлях	Опис	Тіло запиту
POST	/api/auth/register	Реєстрація нового користувача	{ username, fullName, email, password }
GET	/api/users	Отримання списку всіх користувачів (тільки для адміністраторів)	
PUT	/api/users/:userId	Оновлення даних користувача (тільки для адміністраторів)	{ username, email }
PUT	/api/users/:userId/ban	Блокування користувача (тільки для адміністраторів)	
PUT	/api/users/:userId/unban	Розблокування користувача (тільки для адміністраторів)	
DELETE	/api/users/:userId	Видалення користувача (тільки для адміністраторів)	
POST	/api/sensors/data	Отримання даних від сенсора	{ sensorId, type, value }
GET	/api/sensors/data	Отримання даних сенсорів	

Продовження таблиці 1
Метод	Шлях	Опис	Тіло запиту
POST	/api/sensors/data/import	Імпорт даних сенсорів (тільки для адміністраторів)	
GET	/api/sensors/data/export	Експорт даних сенсорів (тільки для адміністраторів)	
POST	/api/crops	Додавання нової культури	{ name, optimalSoilMoisture, optimalSoilTemperature, requiredNutrients }
GET	/api/crops	Отримання списку всіх культур	
GET	/api/recommendations	Отримання рекомендацій для користувача	
POST	/api/recommendations/selected	Додавання вибраного сенсора для моніторингу	{ sensorId, cropName }
DELETE	/api/recommendations/selected	Видалення вибраного сенсора з моніторингу	
GET	/api/recommendations/selected	Отримання списку вибраних сенсорів користувача	

7	ПОБУДОВА ДІАГРАМИ КОМПОНЕНТ

Рисунок 4 – Діаграма компонент

Ця діаграма компонент (див. рис.4) демонструє модульну структуру нашої системи, що забезпечує: 
–	Чітке розділення відповідальності між компонентами. 
–	Можливість незалежного розвитку та масштабування окремих модулів. 
–	Гнучкість у додаванні нових функцій та інтеграції з іншими системами.

Висновки:
У ході даної лабораторної роботи ми успішно розробили серверну/back-end частину програмної системи моніторингу землі для сільськогосподарських потреб з використанням мови програмування JavaScript та бази даних MongoDB.

Посилання на демо-відео:
https://www.youtube.com/watch?v=uaVkpd87XLY
Посилання на репозиторій GitHub:
https://github.com/NureShevchenkoIvan/apz-pzpi-21-8-shevchenko-ivan 

ДОДАТОК А

Рисунок 3 – ER-діаграма

